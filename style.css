  const toggleDropdown = (idToToggle) => {
    document.querySelectorAll(".flp-dropdown").forEach((el) => {
      el.style.display = el.id === idToToggle && el.style.display === "none" ? "block" : "none";
      if (el.id !== idToToggle) el.style.display = "none";
    });
  };

  const pressKey = (key) => {
    const keyCode = key.toUpperCase().charCodeAt(0);
    const down = new KeyboardEvent("keydown", { key, code: key.toUpperCase(), keyCode, which: keyCode, bubbles: true });
    const up = new KeyboardEvent("keyup", { key, code: key.toUpperCase(), keyCode, which: keyCode, bubbles: true });
    document.activeElement.dispatchEvent(down);
    setTimeout(() => document.activeElement.dispatchEvent(up), 50);
  };

  const saveButtons = () => {
    const buttons = Array.from(document.querySelectorAll("#custom-buttons button")).map(btn => ({
      label: btn.textContent,
      key: btn.dataset.key
    }));
    localStorage.setItem("flowlabPlusButtons", JSON.stringify(buttons));
  };

  const addCustomButton = (label, key, save = true) => {
    const newBtn = document.createElement("button");
    newBtn.textContent = label;
    newBtn.dataset.key = key;
    newBtn.className = "flp-action-button";
    newBtn.onclick = () => pressKey(key);
    document.getElementById("custom-buttons").appendChild(newBtn);
    if (save) saveButtons();
  };

  const createOverlay = (dataUrl) => {
    const overlay = document.createElement("img");
    overlay.src = dataUrl;
    overlay.className = "flp-image-overlay";
    overlay.draggable = false;
    document.body.appendChild(overlay);

    let isDragging = false, startX, startY;
    overlay.style.position = "fixed";
    overlay.style.top = "100px";
    overlay.style.left = "100px";
    overlay.style.width = "200px";

    overlay.addEventListener("mousedown", (e) => {
      if (overlay.classList.contains("locked")) return;
      isDragging = true;
      startX = e.clientX - overlay.offsetLeft;
      startY = e.clientY - overlay.offsetTop;
    });

    document.addEventListener("mousemove", (e) => {
      if (isDragging) {
        overlay.style.left = `${e.clientX - startX}px`;
        overlay.style.top = `${e.clientY - startY}px`;
      }
    });

    document.addEventListener("mouseup", () => isDragging = false);

    const resizeHandle = document.createElement("div");
    resizeHandle.className = "flp-resize-handle";
    overlay.appendChild(resizeHandle);

    resizeHandle.addEventListener("mousedown", (e) => {
      e.stopPropagation();
      const startWidth = overlay.offsetWidth;
      const startHeight = overlay.offsetHeight;
      const startX = e.clientX;
      const startY = e.clientY;

      const onMouseMove = (moveEvent) => {
        const newWidth = startWidth + (moveEvent.clientX - startX);
        const newHeight = startHeight + (moveEvent.clientY - startY);
        overlay.style.width = `${Math.max(50, newWidth)}px`;
        overlay.style.height = "auto";
      };

      const onMouseUp = () => {
        document.removeEventListener("mousemove", onMouseMove);
        document.removeEventListener("mouseup", onMouseUp);
      };

      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", onMouseUp);
    });

    const opacitySlider = document.getElementById("overlay-opacity");
    opacitySlider.oninput = () => overlay.style.opacity = opacitySlider.value;

    const toggleBtn = document.getElementById("toggle-lock");
    toggleBtn.onclick = () => {
      if (overlay.classList.contains("locked")) {
        overlay.classList.remove("locked");
        toggleBtn.textContent = "üîì Unlock";
      } else {
        overlay.classList.add("locked");
        toggleBtn.textContent = "üîí Locked";
      }
    };
  };

  document.getElementById("add-custom-button").onclick = () => {
    const label = document.getElementById("custom-label").value.trim();
    const key = document.getElementById("custom-action").value.trim();
    if (!label || !key) return alert("Both fields are required!");
    addCustomButton(label, key);
    document.getElementById("custom-label").value = "";
    document.getElementById("custom-action").value = "";
  };

  document.getElementById("font-select").onchange = (e) => loadFont(e.target.value);
  document.getElementById("import-font").onclick = () => {
    const url = document.getElementById("font-url").value.trim();
    if (!url) return alert("Enter a valid Google Fonts URL.");
    loadFont("CustomFont", url);
  };
  document.getElementById("theme-toggle").onclick = () => {
    const current = document.documentElement.getAttribute("data-theme") || "dark";
    applyTheme(current === "dark" ? "light" : "dark");
  };

  document.getElementById("flp-tools-btn").onclick = () => toggleDropdown("flp-dropdown-tools");
  document.getElementById("flp-themes-btn").onclick = () => toggleDropdown("flp-dropdown-themes");
  document.getElementById("flp-resources-btn").onclick = () => toggleDropdown("flp-dropdown-resources");

  document.getElementById("submenu-simkeys-toggle").onclick = () => {
    const box = document.getElementById("submenu-simkeys-content");
    box.style.display = box.style.display === "block" ? "none" : "block";
  };

  document.getElementById("flp-logo").onclick = () => {
    const modal = document.getElementById("flp-credits-modal");
    modal.style.display = "flex";
    modal.onclick = () => (modal.style.display = "none");
  };

  document.getElementById("upload-image").onclick = () => {
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*";
    fileInput.onchange = (e) => {
      const file = e.target.files[0];
      if (!file) return;
      const reader = new FileReader();
      reader.onload = (event) => {
        createOverlay(event.target.result);
        localStorage.setItem("flp-last-overlay", event.target.result);
      };
      reader.readAsDataURL(file);
    };
    fileInput.click();
  };

  const saved = localStorage.getItem("flowlabPlusButtons");
  if (saved) {
    try {
      JSON.parse(saved).forEach(({ label, key }) => addCustomButton(label, key, false));
    } catch (e) {
      console.warn("‚ö†Ô∏è Failed to load saved buttons:", e);
    }
  }

  const theme = localStorage.getItem("flp-theme") || "dark";
  applyTheme(theme);

  const savedFont = localStorage.getItem("flp-font");
  const savedFontUrl = localStorage.getItem("flp-font-url");
  if (savedFont) loadFont(savedFont, savedFontUrl || null);
  else loadFont("Rubik");

  const savedOverlay = localStorage.getItem("flp-last-overlay");
  if (savedOverlay) createOverlay(savedOverlay);
})();
